@page "/factura"
@using TORO.Data.Response;
@attribute [Authorize(Roles = "Administrator,User")]
@inject IJSRuntime JSRuntime;
<style>
    .table thead {
        background-color: black;
        color: rgb(223, 223, 223);
    }
</style>
<script>
    function printPage() {
    window.print();
}
</script>

<PageTitle>Factura</PageTitle>

@if(!ShowDetails)
{
    <form @onsubmit="BuscarFacturas">
        <div class="row mb-3 d-print-none">
            <div class="col-md-3">
                <input type="text" class="form-control" @bind="clienteFiltro" placeholder="Nombre del Cliente">
            </div>
            <div class="col-md-3">
                <input type="date" class="form-control" @bind="fechaFiltro">
            </div>
            <div class="col-md-3">
                <button type="submit" class="btn btn-outline-primary">
                    <span class="oi oi-magnifying-glass"></span>
                    Buscar
                </button>
                <button class="btn btn-outline-primary d-print-none" @onclick="PrintPageAsync">
                    <span class="oi oi-print"></span>
                </button>
                <button class="btn btn-outline-success" 
                    @onclick='CrearFactura'>
                    <span class="oi oi-plus"></span>
                </button>
            </div>
            <div class="col-md-1">
                 
            </div>
        </div>
    </form>
}
else
{
    <div class="row">
        <div class="col">
            <h3 class="card-title"><b>@TituloForm</b></h3>
        </div>
        <div class="col">
            <button class="btn btn-outline-danger d-print-none"
                @onclick="Back">
                <span class="oi oi-arrow-left"></span>
            </button>
            <button class="btn btn-outline-primary d-print-none" @onclick="PrintPageAsync">
                <span class="oi oi-print"></span>
            </button>
        </div>
    </div>
}
<hr>
@if(!ShowDetails)
{
    <h3 class="card-title"><b>@TituloForm</b></h3>
}
<div class="container">
    @if(ShowDetails)
    {
        <h5><b>Fecha:</b> @SelectedFactura.Fecha.ToShortDateString()</h5>
        <h5><b>Cliente:</b> @SelectedFactura.Cliente</h5>
        <p><b>Nota:</b>Recuerda un quintal tiene 100 kilos</p>
        <!-- Mostrar detalles de la factura seleccionada -->
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th scope="col">Arete</th>
                        <th scope="col">Descripción</th>
                        <th scope="col">Costo/Quintal</th>
                        <th scope="col">Kilos</th>
                        <th scope="col">ITBIS</th>
                        <th scope="col">Costo</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in FacturaDetalles)
                    {
                        <tr>
                            <td>@detalle.Animal.Arete</td>
                            <td>@detalle.Animal.Raza @detalle.Animal.Sexo</td>
                            <td>@detalle.PrecioKilo.ToString("C2")</td>
                            <td>@detalle.Kilo.ToString("N2")</td>
                            <td>
                                <span style="white-space: nowrap;">
                                    @($"{(detalle.Precio * 0.18m):C2}")
                                </span>
                            </td>
                            <td>@detalle.Precio.ToString("C2")</td>
                        </tr>
                    }
                    <tr>
                        <td colspan="4"></td>
                        <td><b>ITBIS:</b></td>
                        <td>@FacturaDetalles.Sum(c => c.Precio * 0.18m).ToString("C2")</td>
                    </tr>
                    <tr>
                        <td colspan="4"></td>
                        <td><b>Total:</b></td>
                        <td>@FacturaDetalles.Sum(c => c.Precio).ToString("C2")</td>
                    </tr>
                </tbody>
            </table>
        </div>
    }
    else if(Facturas != null)
    {
        <!-- Mostrar la lista de facturas -->
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Cliente</th>
                    <th scope="col">ITBIS</th>
                    <th scope="col">Monto</th>
                    <th scope="col">Fecha</th>
                    <th>...</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var factura in Facturas)
                {
                    <tr>
                        <td scope="row">@factura.Id</td>
                        <td>@factura.Cliente</td>
                        <td>
                            <span style="white-space: nowrap;">
                                @($"{(factura.SubTotal * 0.18m):C2}")
                            </span>
                        </td>
                        <td>@factura.SubTotal.ToString("C2")</td>
                        <td>@factura.Fecha.ToShortDateString()</td>
                        <td>
                            <AuthorizeView Roles="Administrator">
                                <Authorized>
                                    <button class="btn btn-outline-info d-print-none" @onclick="() => MostrarDetalles(factura)">
                                        <span class="oi oi-info"></span>
                                        Detalles
                                    </button>
                                    <button @onclick="() => Eliminar(factura)" class="btn btn-outline-danger d-print-none">
                                        <span class="oi oi-trash"></span>
                                        Borrar
                                    </button>
                                </Authorized>
                                <NotAuthorized>
                                    <button class="btn btn-outline-danger">
                                        Sin Acceso
                                    </button>
                                </NotAuthorized>
                            </AuthorizeView>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@code
{
    public string clienteFiltro { get; set; }
    public DateTime? fechaFiltro { get; set; }
    public string TituloForm => ShowDetails == false ?
    "Reporte de facturaciones" : "Módulo de facturación";
    public bool ShowDetails { get; set; } = false;
    public List<FacturaRespose> Facturas { get; set; } = new List<FacturaRespose>();
    public List<FacturaDetalleResponse> FacturaDetalles { get; set; } = new List<FacturaDetalleResponse>();
    public FacturaRespose? SelectedFactura { get; set; } // Factura seleccionada
    public async Task BuscarFacturas()
    {
        var resultado = await facturaServices.BuscarFacturas(clienteFiltro, fechaFiltro);
        if (resultado.Exitoso)
        {
            Facturas = resultado.Datos ?? new List<FacturaRespose>();
        }
        StateHasChanged();
    }

    void CrearFactura()
    {
        urlHelper.NavigateTo("/factura/crear", true);
    }
    void Back()
    {
        urlHelper.NavigateTo(urlHelper.Uri, forceLoad: true);
    }
     async Task Consultar()
    {
        var resultado = await facturaServices.Consultar();
        if (resultado.Exitoso)
        {
            Facturas = resultado.Datos?.OrderByDescending(f => f.Fecha).ToList() ?? new List<FacturaRespose>();
        }
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await Consultar();
    }

    public async Task Eliminar(FacturaRespose user)
    {
        var resultado = await facturaServices.Eliminar(user.ToRequest());
        if (resultado.Exitoso)
        {
            await Consultar();
            StateHasChanged();
        }
    }
    // Método para mostrar detalles de la factura seleccionada
    void MostrarDetalles(FacturaRespose factura)
    {
        SelectedFactura = factura;
        FacturaDetalles = factura.Detalles.ToList();
        ShowDetails = true;
    }
    private async Task PrintPageAsync()
    {
        // Llama a la función JavaScript para imprimir la página
        await JSRuntime.InvokeVoidAsync("printPage");
    }
    
}