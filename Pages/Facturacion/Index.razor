@page "/factura"
@using TORO.Data.Response;

<MenuDisplay />
<hr>
@if(!ShowDetails)
{
    <div class="row">
        <div class="col">
            <h3 class="card-title"><b>@TituloForm</b></h3>
        </div>
        <div class="col">
            <button 
                class="btn btn-outline-success" 
                @onclick='CrearFactura'>
                <span class="oi oi-plus"></span>
            </button>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col">
            <h3 class="card-title"><b>@TituloForm</b></h3>
        </div>
        <div class="col">
            <button class="btn btn-outline-danger"
                @onclick="Back">
                <span class="oi oi-arrow-left"></span>
            </button>
        </div>
    </div>
}
<hr>
<div class="container">
    @if(ShowDetails)
    {
        <!-- Mostrar detalles de la factura seleccionada -->
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">Cantidad</th>
                    <th scope="col">Descripción</th>
                    <th scope="col">ITBIS</th>
                    <th scope="col">Precio</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var detalle in FacturaDetalles)
                {
                    <tr>
                        <td>@detalle.Cantidad</td>
                        <td>@detalle.Animal.Arete @detalle.Animal.Raza @detalle.Animal.Sexo</td>
                        <td>
                            <span style="white-space: nowrap;">
                                @($"{(detalle.Precio * 0.18m):C2}")
                            </span>
                        </td>
                        <td>@detalle.Precio.ToString("C2")</td>

                    </tr>
                }
                <div class="row">
                    <div class="col">
                    <h5><b>ITBIS:</b> @FacturaDetalles.Sum(c=>c.Precio*0.18m).ToString("C2")</h5>
                    </div>
                    <div class="col">
                        <h4><b>Total:</b> @FacturaDetalles.Sum(c=>c.Precio).ToString("C2")</h4>
                    </div>
                </div>
            </tbody>
        </table>
    }
    else if(Facturas != null)
    {
        <!-- Mostrar la lista de facturas -->
        <table class="table">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Cliente</th>
                    <th scope="col">ITBIS</th>
                    <th scope="col">Monto</th>
                    <th scope="col">Fecha</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var factura in Facturas)
                {
                    <tr>
                        <th scope="row">@factura.Id</th>
                        <td>@factura.Cliente</td>
                        <td>
                            <span style="white-space: nowrap;">
                                @($"{(factura.SubTotal * 0.18m):C2}")
                            </span>
                        </td>
                        <td>@factura.SubTotal.ToString("C2")</td>
                        <td>@factura.Fecha</td>
                        <td>
                            <button class="btn btn-outline-primary" @onclick="() => MostrarDetalles(factura)">
                                <span class="oi oi-info"></span>
                                Detalles
                            </button>
                            <button @onclick="() => Eliminar(factura)" class="btn btn-outline-danger">
                                <span class="oi oi-trash"></span>
                                Borrar
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@code
{
    public string TituloForm => ShowDetails == false ?
    "Módulo de facturación" : "Reporte de facturaciones";
    public bool ShowDetails { get; set; } = false;
    public List<FacturaRespose> Facturas { get; set; } = new List<FacturaRespose>();
    public List<FacturaDetalleResponse> FacturaDetalles { get; set; } = new List<FacturaDetalleResponse>();
    public FacturaRespose? SelectedFactura { get; set; } // Factura seleccionada

    void CrearFactura()
    {
        urlHelper.NavigateTo("/factura/crear");
    }
    void Back()
    {
        ShowDetails = false;
    }
     async Task Consultar()
    {
        var resultado = await facturaServices.Consultar();
        if (resultado.Exitoso)
        {
            Facturas = resultado.Datos??new List<FacturaRespose>();
        }
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await Consultar();
    }

    public async Task Eliminar(FacturaRespose user)
    {
        var resultado = await facturaServices.Eliminar(user.ToRequest());
        if (resultado.Exitoso)
        {
            await Consultar();
            StateHasChanged();
        }
    }
    // Método para mostrar detalles de la factura seleccionada
    void MostrarDetalles(FacturaRespose factura)
    {
        SelectedFactura = factura;
        FacturaDetalles = factura.Detalles.ToList();
        ShowDetails = true;
    }
    
}