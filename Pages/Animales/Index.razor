@page "/animal"
@attribute [Authorize(Roles = "Administrator,User")]
<style>
    .table th{
    border: 1px solid #000000;
    
    }

    .table thead {
        background-color: rgb(0, 0, 0);
    }
</style>
<hr>
@if (!ShowForm)
{
    <div class="row mb-2">
        <div class="col">
            <input type="text" @bind="Filtro">
        </div>
        <div class="col">
            <button class="btn btn-outline-primary" @onclick="()=>CargarInfo()">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                </svg>
                Buscar</button>
            <button class="btn btn-outline-success" @onclick="Formulario">
                <span class="oi oi-plus"></span>
            </button>
        </div>
    </div>
    <hr>
    <h3><b>Bovinos</b> (@Animales.Where(c=>!c.Vendido).Count())</h3>
}

<div class="container">
    @if(!ShowForm)
    {
        <h5><b>Inversión en bovinos</b> (@Animales.Where(c=>!c.Vendido).Sum(c => c.CostoCompra).ToString("C2"))</h5>
    }
    @if (ShowForm)
    {
        <div class="card">
            <div class="card-body">
                <h3 class="card-title"><b>@TituloForm</b></h3>
                <hr>
                <EditForm Model="request" OnValidSubmit="Send">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3 input-group">
                        <label for="Arete" class="input-group-text">Arete</label>
                        <InputText id="Arete" class="form-control" @bind-Value="@request.Arete" />
                    </div>
                    <div class="mb-3 input-group">
                        <label for="Raza" class="input-group-text">Raza</label>
                        <select id="Sexo" class="form-control" @bind="@request.Raza">
                            <option disabled="Selecciona un sexo">Selecciona una raza</option>
                            @foreach(var raza in Razas)
                            {
                                <option value="@raza.Nombre">
                                    @raza.Nombre 
                                </option>
                            }
                        </select>
                    </div>
                    <div class="mb-3 input-group">
                        <label for="Sexo" class="input-group-text">Sexo</label>
                        <select id="Sexo" class="form-control" @bind="@request.Sexo">
                            <option disabled="Selecciona un sexo">Selecciona un sexo</option>
                            <option value="Macho">Macho</option>
                            <option value="Hembra">Hembra</option>
                        </select>
                    </div>
                    <div class="mb-3 input-group">
                        <label for="CostoCompra" class="input-group-text">Costo/Compra</label>
                        <InputNumber id="CostoCompra" class="form-control" @bind-Value="@request.CostoCompra" />
                    </div>
                    <div class="mb-3 input-group">
                        <label for="FechaNacimiento" class="input-group-text">Fecha/Nacimiento</label>
                        <InputDate id="FechaNacimiento" class="form-control" @bind-Value="@request.FechaNacimiento" />
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-outline-primary">Guardar</button>
                        <button @onclick="Cancelar" class="btn btn-outline-secondary">Cancelar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    else
    {
        @if (MostrarConfirmacio)
        {
            <div class="modal" tabindex="-1" role="dialog" style="display: block; background-color: rgba(0, 0, 0, 0.5);">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">¿Estas seguro?</h5>
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-outline-success"
                                @onclick="ConfirmarPerdido" >
                                <span class="oi oi-check"></span> Sí
                            </button>
                            <button class="btn btn-outline-danger"
                                @onclick="CancelarConfirmacion">
                                <span class="oi oi-x"></span> No
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
        <table class="table">
            <thead>
                <tr>
                    <th>Arete</th>
                    <th>Raza</th>
                    <th>Sexo</th>
                    <th>Costo/Compra</th>
                    <th>Fecha/Nacimiento</th>
                    <th>...</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Animales)
                {
                    @if(!item.Vendido)
                    {
                        <tr>
                            <td>@item.Arete</td>
                            <td>@item.Raza</td>
                            <td>@item.Sexo</td>
                            <td>@item.CostoCompra.ToString("C2")</td>
                            <td>@item.FechaNacimiento.ToShortDateString()</td>
                            <td>
                                <AuthorizeView Roles="Administrator">
                                    <Authorized>
                                        <button @onclick="()=>MostrarConfirmacion(item)"
                                            class="btn btn-outline-primary">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-emoji-dizzy" viewBox="0 0 16 16">
                                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                                <path d="M9.146 5.146a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 1 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 0-.708zm-5 0a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 1 1 .708.708l-.647.646.647.646a.5.5 0 1 1-.708.708L5.5 7.207l-.646.647a.5.5 0 1 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 0-.708zM10 11a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"/>
                                            </svg>
                                            Perdido
                                        </button>
                                        <button @onclick="()=>Seleccionar(item.Id)"
                                            class="btn btn-outline-warning">
                                            <span class="oi oi-pencil"></span>
                                            Editar
                                        </button>
                                        <button @onclick="()=>Eliminar(item)"
                                            class="btn btn-outline-danger">
                                            <span class="oi oi-trash"></span>
                                            Borrar
                                        </button>
                                    </Authorized>
                                    <NotAuthorized>
                                        <button class="btn btn-outline-danger">
                                            Sin Acceso
                                        </button>
                                    </NotAuthorized>
                                </AuthorizeView>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</div>    
@code {
    public string TituloForm => request.Id == 0 ?
    "Agregar bovino" : "Modificar bovino";
    
    public bool ShowForm { get; set; } = false;
    public bool MostrarConfirmacio { get; set; } = false;
    public string Filtro { get; set; } = "";
    public List<RazaResponse> Razas { get; set; } = new List<RazaResponse>();
    public List<AnimalResponse> Animales { get; set; } = new List<AnimalResponse>();
    public AnimalResponse SelectCar { get; set; } = new AnimalResponse();
    public AnimalResponse AnimalEnConfirmacion { get; set; } = new AnimalResponse();
    public AnimalRequest request { get; set; } = new AnimalRequest();

    void MostrarConfirmacion(AnimalResponse animal)
    {
        MostrarConfirmacio = true;
        AnimalEnConfirmacion = animal;
    }
    void CancelarConfirmacion()
    {
        MostrarConfirmacio = false;
    }
    void Cancelar()
    {
        request = new AnimalRequest();
        ShowForm = false;
        // Recargar la página actual
        urlHelper.NavigateTo(urlHelper.Uri, forceLoad: true);
    }
    async Task CargarInfo()
    {
        var resultado = await animalServices.Consultar(Filtro);
        if (resultado.Exitoso)
            Animales = resultado.Datos!;
    }
    async Task CargarRaza()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await razaServices.Consultar("");
        if (r.Exitoso)
        {
            Razas = r.Datos!;
        }
    }
    protected async override Task OnInitializedAsync()
    {
        await Consultar();
        await CargarRaza();
    }
    public async Task<bool> Consultar()
    {
        var response = await animalServices.Consultar(Filtro);
        if(response.Exitoso)
            Animales = response.Datos!;
        return true;
    }
    public async Task Eliminar(AnimalResponse user)
    {
        var resultado = await animalServices.Eliminar(user.ToRequest());
        if (resultado.Exitoso)
        {
            await CargarInfo();
            StateHasChanged();
        }
    }
    public void Seleccionar(int Id)
    {
        ShowForm = true;
        var selectedAnimal = Animales.FirstOrDefault(c => c.Id == Id);
        if (selectedAnimal != null)
        {
            request.Id = selectedAnimal.Id;
            request.Arete = selectedAnimal.Arete;
            request.Raza = selectedAnimal.Raza;
            request.Sexo = selectedAnimal.Sexo;
            request.CostoCompra = selectedAnimal.CostoCompra;
            request.FechaNacimiento = selectedAnimal.FechaNacimiento;
            // Asegúrate de que las propiedades del modelo request se asignen correctamente
        }
    }

    public async Task Send()
    {
        if (request.Id == 0 )
        {
            //Debo registrar el contacto..
            var r = await animalServices.Registrar(request);
            if (r.Exitoso)
            {
                Cancelar();
                await CargarInfo();
                StateHasChanged();
            }
        }
        else
        {
            //Debo solicitar modificar el contacto...
            var r = await animalServices.Modificar(request);
            if (r.Exitoso)
            {
                Cancelar();
                await CargarInfo();
                StateHasChanged();
            }
        }
    }
    async Task ConfirmarPerdido()
    {
        // Crear un objeto LostAnimalRequest a partir de AnimalRequest
        var lostAnimalRequest = new LostAnimalRequest
        {
            Id = AnimalEnConfirmacion.Id,
            Arete = AnimalEnConfirmacion.Arete,
            Raza = AnimalEnConfirmacion.Raza,
            Sexo = AnimalEnConfirmacion.Sexo,
            CostoCompra = AnimalEnConfirmacion.CostoCompra,
            FechaNacimiento = AnimalEnConfirmacion.FechaNacimiento,
            FechaMuerte = DateTime.Now // Ajusta la fecha de muerte según sea necesario
        };

        // Realiza una llamada al servidor para marcar el animal como perdido en la entidad LostAnimal.
        var resultado = await lostAnimalServices.Crear(lostAnimalRequest);
        
        if (resultado.Exitoso)
        {
            // Luego, elimina el animal de la entidad Animal.
            var eliminacionExitosa = await animalServices.Eliminar(AnimalEnConfirmacion.ToRequest());
            
            if (eliminacionExitosa.Exitoso)
            {
                MostrarConfirmacio = false;
                await CargarInfo(); // Actualiza la lista de animales después de los cambios en el servidor.
            }
        }
    }
    void Formulario()
    {
        urlHelper.NavigateTo("add/bovino");
    }
}