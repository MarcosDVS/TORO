@page "/add/bovino"
@attribute [Authorize(Roles = "Administrator,User")]

<hr>

<div class="container">
    @if (Form)
        {
            <div class="m-4 d-flex">
                <div class="container-sm p-4" style="width:25rem; border-color:lightgray; border-style:solid; border-radius:5%">
                    <h3 class="text-lg-center mb-4">Agregar Raza</h3>

                    <EditForm Model="reques" OnValidSubmit="Enviar">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>
                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @ErrorMessage
                            </div>
                        }
                        <div class="input-group">
                            <div class="mb-3 input-group">
                                <label class="input-group-text">Nombre/Raza</label>
                                <InputText class="form-control" @bind-Value="@reques.Nombre"></InputText>
                            </div>
                            
                            <div class="d-grid gap-2 w-100">
                                <button type="submit" class="btn btn-outline-primary">Guardar</button>
                                <button @onclick="Back" class="btn btn-outline-secondary">Cancelar</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        }
        else{
            <div class="card">
            <div class="card-body">
                <h3 class="card-title"><b>Agregar bovino</b></h3>
                <hr>
                <EditForm Model="request" OnValidSubmit="Send">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @ErrorMessage
                            </div>
                        }
                    <div class="mb-3 input-group">
                        <label for="Arete" class="input-group-text">Arete</label>
                        <InputText id="Arete" class="form-control" @bind-Value="@request.Arete" />
                    </div>
                    <div class="mb-3 input-group">
                        <label for="Raza" class="input-group-text">Raza</label>
                        <select id="Sexo" class="form-control" @bind="@request.Raza">
                            <option disabled="Selecciona un sexo">Selecciona una raza</option>
                            @foreach(var raza in Razas)
                            {
                                <option value="@raza.Nombre">
                                    @raza.Nombre
                                </option>
                                
                            }
                        </select>
                        <button class="btn btn-outline-primary d-print-none" type="button" @onclick='()=>{urlHelper.NavigateTo("/Raza", true);}'>
                            <span class="oi oi-info"></span>
                        </button>
                        <button class="btn btn-outline-success d-print-none" type="button" @onclick="FormRaza">
                            <span class="oi oi-plus"></span>
                        </button>
                    </div>
                    <div class="mb-3 input-group">
                        <label for="Sexo" class="input-group-text">Sexo</label>
                        <select id="Sexo" class="form-control" @bind="@request.Sexo">
                            <option disabled="Selecciona un sexo">Selecciona un sexo</option>
                            <option value="Macho">Macho</option>
                            <option value="Hembra">Hembra</option>
                        </select>
                    </div>
                    <div class="mb-3 input-group">
                        <label for="CostoCompra" class="input-group-text">Costo/Compra</label>
                        <InputNumber id="CostoCompra" class="form-control" @bind-Value="@request.CostoCompra" />
                    </div>
                    <div class="mb-3 input-group">
                        <label for="FechaNacimiento" class="input-group-text">Fecha/Nacimiento</label>
                        <InputDate id="FechaNacimiento" class="form-control" @bind-Value="@request.FechaNacimiento" />
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-outline-primary">Guardar</button>
                        <button @onclick="Cancelar" class="btn btn-outline-secondary">Cancelar</button>
                    </div>
                </EditForm>
            </div>
        </div>
        }
    
</div>

@code
{
    public AnimalRequest request { get; set; } = new AnimalRequest();
    public RazaRequest reques { get; set; } = new RazaRequest();
    public List<AnimalResponse> Animales { get; set; } = new List<AnimalResponse>();
    public List<RazaResponse> Razas { get; set; } = new List<RazaResponse>();
    public bool Form { get; set; } = false;
    public string Filtro { get; set; } = "";
    public string ErrorMessage { get; set; } = "";
    void Cancelar()
    {
        request = new AnimalRequest();
        urlHelper.NavigateTo("animal", forceLoad: true);
        CargarInfo(); // Agregar esta l√≠nea para recargar la lista de animales
    }
    async Task CargarInfo()
    {
        var resultado = await animalServices.Consultar(Filtro);
        if (resultado.Exitoso)
            Animales = resultado.Datos!;
    }
    async Task CargarRaza()
    { 
        //Llenar la lista de contactos para mostrar al usuario...
        var r = await razaServices.Consultar("");
        if (r.Exitoso)
        {
            Razas = r.Datos!;
        }
    }
    public async Task<bool> Consultar()
    {
        var response = await animalServices.Consultar(Filtro);
        if(response.Exitoso)
            Animales = response.Datos!;
        return true;
    }
    protected async override Task OnInitializedAsync()
    {
        await Consultar();
        await CargarRaza();
    }
    public async Task Send()
    {
        if (request.Id == 0)
        {
            // Verificar si el correo electr√≥nico ya existe en la base de datos
            var existingUser = Animales.FirstOrDefault(u => u.Arete.Equals(request.Arete, StringComparison.OrdinalIgnoreCase) && !u.Vendido);
            if (existingUser != null)
            {
                // Mostrar mensaje de error porque el correo electr√≥nico ya existe
                // Aqu√≠ puedes establecer una variable de estado para mostrar el mensaje en tu interfaz de usuario
                // Por ejemplo: 
                ErrorMessage = "Patron ya existe un animal con este arete ü§®";
            }
            else
            {
                // Debo registrar el contacto.
                var r = await animalServices.Registrar(request);
                if (r.Exitoso)
                {
                    Cancelar();
                    await CargarInfo();
                    StateHasChanged();
                }
            }
        }
        else
        {
            // Debo solicitar modificar el contacto...
            var r = await animalServices.Modificar(request);
            if (r.Exitoso)
            {
                Cancelar();
                await CargarInfo();
                StateHasChanged();
            }
        }
    }
    //Metodos para la Raza
    void Back()
    {
        reques = new RazaRequest();
        Form = false;
    }
    public async Task Enviar()
    {
        if (reques.Id == 0)
        {
            if (reques.Id == 0)
            {
                var r = await razaServices.Crear(reques);
                StateHasChanged();
                await CargarRaza();
                Back();
            }
            else
            {
                ErrorMessage = "No se pudo agregar la raza";
            }
        }
        else
        {
            //Debo solicitar modificar el contacto...
            var r = await razaServices.Modificar(reques);
            if (r.Exitoso)
            {
                await CargarRaza();
                StateHasChanged();
                Back();
            }
        }
    }
    void FormRaza()
    {
        Form = true;
    }

}